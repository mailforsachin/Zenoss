#!/bin/sh

source ../ZenossEnv.var

zenoss_api () {
    ROUTER_ENDPOINT=$1
    ROUTER_ACTION=$2
    ROUTER_METHOD=$3
    DATA=$4

    if [ -z "${DATA}" ]; then
        echo "Usage: zenoss_api <endpoint> <action> <method> <data>"
        return 1
    fi
# add a -k for the curl call to ignore the default cert
    curl \
        -k \
        -u "$ZENOSS_USERNAME:$ZENOSS_PASSWORD" \
        -X POST \
        -H "Content-Type: application/json" \
        -d "{\"action\":\"$ROUTER_ACTION\",\"method\":\"$ROUTER_METHOD\",\"data\":[$DATA], \"tid\":1}" \
        "$ZENOSS_URL/zport/dmd/$ROUTER_ENDPOINT"
}


add_trigger() 
{
	TRIGGER_NAME=$1
	echo $TRIGGER_NAME

    	if [ -z "$TRIGGER_NAME" ]; then
        	echo "Usage: add_trigger <triggername>"
		return 1
    	fi
    
	zenoss_api Events/triggers_router TriggersRouter addTrigger "{\"newId\":\"$TRIGGER_NAME\"}"
    
}

get_trigger()
{
	TRIGGER_NAME=$1
        #echo $TRIGGER_NAME

        if [ -z "$TRIGGER_NAME" ]; then
                echo "Usage:get_trigger <triggername>"
                return 1
        fi
	
	TRIGGER_UUID=`zenoss_api Events/triggers_router TriggersRouter getTriggerList "{}"|$SCRIPTS_DIR/jq --arg TRIGGER_NAME "$TRIGGER_NAME" '.result.data[]|select(.name==$TRIGGER_NAME)' |$SCRIPTS_DIR/jq '.uuid'`

	zenoss_api Events/triggers_router TriggersRouter getTrigger "{\"uuid\":$TRIGGER_UUID}"|$SCRIPTS_DIR/jq

}

update_trigger()
{

TRIGGER_NAME=$1

#echo "Use for testing::zenoss_api Events/triggers_router TriggersRouter getTriggerList "{}""

TRIGGER_UUID=`zenoss_api Events/triggers_router TriggersRouter getTriggerList "{}"|$SCRIPTS_DIR/jq --arg TRIGGER_NAME "$TRIGGER_NAME" '.result.data[]|select(.name==$TRIGGER_NAME)' |$SCRIPTS_DIR/jq '.uuid'`

if [ -z "$TRIGGER_UUID" ]; then
        echo "Error: Trigger is not present"
        return 1
fi

#zenoss_api Events/triggers_router TriggersRouter getTrigger "{\"uuid\":$TRIGGER_UUID}"|$SCRIPTS_DIR/jq

Rules="(dev.production_state == 1000) and (evt.severity >= 4) and (\\\"/App/Zenoss\\\" not in evt.event_class) and (\\\"/Status/Ping\\\" not in evt.event_class) and (\\\"/Status/Winrm\\\" not in evt.event_class) and (\\\"/Perf/MissedRuns\\\" not in evt.event_class) and (\\\"/Status/Winrm/Ping\\\" not in evt.event_class) and (\\\"/Cmd/Fail\\\" not in evt.event_class) and (\\\"Server not found in Kerberos\\\" not in evt.message) and (\\\"Illegal operation attempted on\\\" not in evt.message) and (\\\"threshold of Processor Queue\\\" not in evt.message) and (\\\"HTTP Unauthorized received\\\" not in evt.message) and (\\\"kerberos\\\" not in evt.summary) and (\\\"authGSSClientStep fail\\\" not in evt.message) and (\\\"Windows Perfmon Error\\\" not in evt.message) and (\\\"kinit: Clients credentials have\\\" not in evt.message) and (\\\"failed collection\\\" not in evt.message)"

zenoss_api Events/triggers_router TriggersRouter updateTrigger "{\"uuid\":$TRIGGER_UUID,\"enabled\":true,\"name\":\"$TRIGGER_NAME\",\"rule\":{\"source\":\"$Rules\"},\"globalRead\":false,\"globalWrite\":false,\"globalManage\":false,\"users\":[]}"

}


getall_notification()
{

	#zenoss_api Events/triggers_router TriggersRouter getNotifications '{}'|$SCRIPTS_DIR/jq -M '.result.data[]'
	#zenoss_api Events/triggers_router TriggersRouter getNotification '{"uid":"/zport/dmd/NotificationSubscriptions/test"}'|$SCRIPTS_DIR/jq '.result.data[]'
	zenoss_api Events/triggers_router TriggersRouter getNotification '{"uid":"/zport/dmd/NotificationSubscriptions/test3"}'|$SCRIPTS_DIR/jq '.result.data[]'
	zenoss_api triggers_router TriggersRouter exportConfiguration '{}'|$SCRIPTS_DIR/jq '.'
}

create_notification()
{

	NOTIFICATION_NAME=$1
        echo NOTIFICATION_NAME 
	ACTION="command"

        if [ -z "$NOTIFICATION_NAME" ]; then
                echo "Usage:  create_notification <notificataionname>"
                return 1
        fi

	zenoss_api Events/triggers_router TriggersRouter addNotification "{\"newId\":\"$NOTIFICATION_NAME\",\"action\":\"$ACTION\"}"
}

update_notification()
{

        NOTIFICATION_NAME=$1
	echo $NOTIFICATION_NAME

        if [ -z "$NOTIFICATION_NAME" ]; then
                echo "Error: Notification Name is not present"
                return 1
        fi

	
	
	#WORKING zenoss_api triggers_router TriggersRouter updateNotification '{"uid":"/zport/dmd/NotificationSubscriptions/ActiveMQIntegrationOPASV3","enabled":false,"send_clear":false,"send_initial_occurrence":true,"delay_seconds":"0","repeat_seconds":"0","action_timeout":"60","body_format":"test2","clear_body_format":"test","user_env_format":null,"notification_globalRead":false,"notification_globalWrite":false,"notification_globalManage":false,"recipients":[],"subscriptions":["94a1915c-c5f8-4753-9979-276ffaf2b681"]}'

COMMAND="python /opt/zenoss/var/ext/2WaySendEvent/2WaySendEvent.py send -q 'Zenoss' -a 'Zenoss' -n '${evt/details/CIName}' -p '${evt/details/esmProfile}' -s '${evt/severity}' -k '${evt/dedupid}' -c 'dsuszenuatcc01.us.dell.com' -t '${evt/details/msg_mod}' -m '${evt/details/msg_mod}' -u '${urls/eventUrl}' -z 'DSOM' -e '{"Mc_ueid" : "${evt/evid}"}' -evid '${evt/evid}'"


CLEAR_COMMAND="python /opt/zenoss/var/ext/2WaySendEvent/2WaySendEvent.py send -q 'Zenoss' -a 'Zenoss' -n '${evt/details/CIName}' -p '${evt/details/esmProfile}' -s '${evt/severity}' -k '${evt/dedupid}' -c 'dsuszenuatcc01.us.dell.com' -t '${evt/details/msg_mod}' -m '${evt/details/msg_mod}' -u '${urls/eventUrl}' -z 'DSOM' -e '{"Mc_ueid" : "${evt/evid}"}' -evid '${evt/evid}'"
	
zenoss_api triggers_router TriggersRouter updateNotification "{\"uid\":\"/zport/dmd/NotificationSubscriptions/$1\",\"enabled\":false,\"send_clear\":false,\"send_initial_occurrence\":true,\"delay_seconds\":\"0\",\"repeat_seconds\":\"0\",\"action_timeout\":\"60\",\"body_format\":\"$COMMAND\",\"clear_body_format\":\"$CLEAR_COMMAND\",\"user_env_format\":null,\"notification_globalRead\":false,\"notification_globalWrite\":false,\"notification_globalManage\":false,\"recipients\":[],\"subscriptions\":[\"c83a587f-d49c-4350-acca-ada89a91c5c3\"]}"

}


if [ "$1" = "add_trigger" ]; then
	add_trigger "$2"

elif [ "$1" = "get_trigger" ]; then
        get_trigger "$2"

elif [ "$1" = "update_trigger" ]; then
        update_trigger "$2"

elif [ "$1" = "getall_notification" ]; then
         getall_notification

elif [ "$1" = "create_notification" ]; then
         create_notification "$2"

elif [ "$1" = "update_notification" ]; then
        update_notification "$2"

else
	echo ""
	echo "Incorrect Syntax:"
	echo ""
	echo "$0 add_trigger <triggername> OR $0 get_trigger <triggername> OR $0 update_trigger <triggername> OR $0 getall_notification OR $0 create_notification <notificationname> OR update_notification <notificationname>"
	echo ""
fi
