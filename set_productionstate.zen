#!/bin/sh

# Your Zenoss server settings.
# The URL to access your Zenoss5 Endpoint
source ../ZenossEnv.var
# Generic call to make Zenoss JSON API calls easier on the shell.
zenoss_api () {
    ROUTER_ENDPOINT=$1
    ROUTER_ACTION=$2
    ROUTER_METHOD=$3
    DATA=$4

    if [ -z "${DATA}" ]; then
        echo "Usage: zenoss_api <endpoint> <action> <method> <data>"
        return 1
    fi
# add a -k for the curl call to ignore the default cert
    curl \
        -k \
        -u "$ZENOSS_USERNAME:$ZENOSS_PASSWORD" \
        -X POST \
        -H "Content-Type: application/json" \
        -d "{\"action\":\"$ROUTER_ACTION\",\"method\":\"$ROUTER_METHOD\",\"data\":[$DATA], \"tid\":1}" \
        "$ZENOSS_URL/zport/dmd/$ROUTER_ENDPOINT"
}


# Helper call for adding standard device types.
set_productionstate() 
{
    SOURCE_DEVICE_CLASS=$1
    PRODUCTION_STATE=$2
    #echo $SOURCE_DEVICE_CLASS
    #echo $PRODUCTION_STATE
    
    if  [[( -z "$SOURCE_DEVICE_CLASS" )|| (-z "$PRODUCTION_STATE" )]]; then
        echo "Usage: set_productionstate  <SOURCE DEVICE CLASS> <PRODUCTION STATE Production:1000,Pre-Production:500,Test:400,Maintenance:300,DataCollection:50,Decommissioned:-1>"
        return 1
    fi

    echo "Setting production state of $1 to $2."
    
    read -r -p "Are you sure(y/n)?" response
    
    if [[ $response =~ ^(yes|y| ) ]]; then	    
	 
	hostname_response=`zenoss_api device_router DeviceRouter getDevices "{\"uid\":\"/zport/dmd$1\",\"params\":{},\"limit\":10000}" | $SCRIPTS_DIR/jq -M '.result.devices[].uid'`

    #echo $hostname_response

    	for i in `echo $hostname_response`; do

	  zenoss_api "device_router" "DeviceRouter" "setInfo" "{\"uid\":$i,\"productionState\":$PRODUCTION_STATE}"
	
	done
    fi 
}

if [ "$1" = "set_productionstate" ]; then
 	set_productionstate "$2" "$3"
else
	echo ""
	echo "Incorrect Syntax:"
	echo ""
	echo "$0 set_productionstate <source device class> <PRODUCTION STATE Production:1000,Pre-Production:500,Test:400,Maintenance:300,DataCollection:50,Decommissioned:-1>"
	echo "EXAMPLE:: $0 set_productionstate /Devices/Server/Microsoft/Windows/xxx   1000"
	echo ""
fi

